name: "freshfromfarm CICD deploy"

on:
  push:
    branches: ["master"]

env:
  REACT_APP_BACKEND: ${{ secrets.REACT_APP_BACKEND }}
  RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
  RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
  DATABASE: ${{ secrets.DATABASE }}
  SECRET: ${{ secrets.SECRET }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_BUCKET_REGION: ${{ secrets.AWS_BUCKET_REGION }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  TEST_TOKEN: "This will work or not"

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Creting env file on client
        run: |
          cd client
          sudo touch .env
          echo REACT_APP_BACKEND= ${{ secrets.REACT_APP_BACKEND }} >> .env
          echo RAZORPAY_KEY_ID= ${{ secrets.RAZORPAY_KEY_ID }} >> .env
          echo RAZORPAY_KEY_SECRET= ${{ secrets.RAZORPAY_KEY_SECRET }} >> .env
          cat .env
      - name: Split out
        run: |
          echo "The react app backend:$REACT_APP_BACKEND"
          echo "The test token1:$TEST_TOKEN"
          echo "The test token2:${{env.TEST_TOKEN}}"
      - name: Client section
        run: |
          cd client 
          npm i
          sudo chmod -R 777 node_modules
          npm run build
          sudo mv build ../server/static

      - name: Creting env file on server
        run: |
          cd server
          touch .env
          echo DATABASE= $DATABASE >> .env
          echo SECRET= $SECRET >> .env
          echo RAZORPAY_KEY_ID= $RAZORPAY_KEY_ID >> .env
          echo RAZORPAY_KEY_SECRET= $RAZORPAY_KEY_SECRET >> .env
          echo AWS_BUCKET_NAME= $AWS_BUCKET_NAME >> .env
          echo AWS_BUCKET_REGION= $AWS_BUCKET_REGION >> .env
          echo AWS_ACCESS_KEY= $AWS_ACCESS_KEY >> .env
          echo AWS_SECRET_KEY= $AWS_SECRET_KEY >> .env
      - name: Server section
        run: |
          cd server
          npm i
          pm2 stop 0
          pm2 start 0
          pm2 save
          sudo service nginx restart
      - name: Setup finish
        run: echo "Deployment completed"

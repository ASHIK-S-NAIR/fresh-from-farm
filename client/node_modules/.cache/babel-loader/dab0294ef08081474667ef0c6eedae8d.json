{"ast":null,"code":"var _jsxFileName = \"F:\\\\mern\\\\projects\\\\greenbeans\\\\client\\\\src\\\\admin\\\\EmployeeUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { isAuthenticated } from \"../auth\";\nimport Cross from \"../icons/cross-black.svg\";\nimport { getEmployees } from \"../user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmployeeUpdate = _ref => {\n  _s();\n\n  let {\n    order,\n    setOrderEmployeeAssignActive\n  } = _ref;\n  const [employees, setEmployees] = useState([]);\n  const [EmployeeId, setEmployeeId] = useState('');\n  const {\n    user,\n    token\n  } = isAuthenticated();\n\n  const preload = async (userId, token) => {\n    const data = await getEmployees(userId, token, \"Available\");\n\n    if (data.error) {\n      return console.log(data.error);\n    } else {\n      return setEmployees(data);\n    }\n  };\n\n  const handleEmployeeAssign = async (userId, token, orderId, EmployeeId) => {// \n  };\n\n  useEffect(() => {\n    preload(user._id, token);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"employeeUpdate-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-small-sec\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-head-sec\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"popup-header employeeUpdate-popup-header\",\n              children: \"Assign Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cross-sec\",\n              onClick: () => setOrderEmployeeAssignActive(null),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: Cross,\n                alt: \"\",\n                className: \"cross-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup-form-single-group\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"popup-form-label\",\n                  children: \"Order ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popup-form-value\",\n                  children: order._id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup-form-single-group\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"popup-form-label\",\n                  children: \"Employee Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  name: \"employeeName\",\n                  id: \"employeeName\",\n                  value: EmployeeId,\n                  onChange: e => setEmployeeId(e.target.value),\n                  className: \"popup-form-value\",\n                  children: employees && employees.map((employee, index) => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: employee.Euser._id,\n                      children: employee.Euser.name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 70,\n                      columnNumber: 36\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"popup-form-btn\",\n              onClick: () => handleEmployeeAssign(user._id, token, order._id, employeeId),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeeUpdate, \"yxAYxhBDp4gTFEcN2RGxY2klbyQ=\");\n\n_c = EmployeeUpdate;\nexport default EmployeeUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeUpdate\");","map":{"version":3,"sources":["F:/mern/projects/greenbeans/client/src/admin/EmployeeUpdate.js"],"names":["React","useState","useEffect","isAuthenticated","Cross","getEmployees","EmployeeUpdate","order","setOrderEmployeeAssignActive","employees","setEmployees","EmployeeId","setEmployeeId","user","token","preload","userId","data","error","console","log","handleEmployeeAssign","orderId","_id","e","target","value","map","employee","index","Euser","name","employeeId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { isAuthenticated } from \"../auth\";\r\nimport Cross from \"../icons/cross-black.svg\";\r\nimport { getEmployees } from \"../user\";\r\n\r\nconst EmployeeUpdate = ({order,setOrderEmployeeAssignActive}) => {\r\n    const [employees, setEmployees] = useState([]);\r\n    const [EmployeeId, setEmployeeId] = useState('');\r\n\r\n    const {user, token} = isAuthenticated();\r\n\r\n    const preload = async (userId, token) => {\r\n        const data = await getEmployees(userId, token, \"Available\");\r\n        if(data.error){\r\n            return console.log(data.error)\r\n        }else{\r\n            return setEmployees(data);\r\n        }\r\n    }\r\n\r\n    const handleEmployeeAssign = async (userId, token, orderId, EmployeeId) => {\r\n        // \r\n    }\r\n\r\n    useEffect(() => {\r\n        preload(user._id, token)\r\n    }, [])\r\n    return (\r\n        <section className=\"employeeUpdate-section\">\r\n          <div className=\"black-background\">\r\n            <div className=\"popup-small-sec\">\r\n              <div className=\"popup-group\">\r\n                <div className=\"popup-head-sec\">\r\n                  <h1 className=\"popup-header employeeUpdate-popup-header\">\r\n                    Assign Employee\r\n                  </h1>\r\n                  <div\r\n                    className=\"cross-sec\"\r\n                    onClick={() => setOrderEmployeeAssignActive(null)}\r\n                  >\r\n                    <img src={Cross} alt=\"\" className=\"cross-img\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"popup-form\">\r\n                  <div className=\"popup-form-single-group\">\r\n                    <div className=\"popup-form-group\">\r\n                      <label className=\"popup-form-label\">Order ID</label>\r\n                      <p className=\"popup-form-value\">{order._id}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"popup-form-single-group\">\r\n                    <div className=\"popup-form-group\">\r\n                      <label className=\"popup-form-label\">Employee Name</label>\r\n                      <select\r\n                        name=\"employeeName\"\r\n                        id=\"employeeName\"\r\n                        value={EmployeeId}\r\n                        onChange={(e) => setEmployeeId(e.target.value)}\r\n                        className= \"popup-form-value\"\r\n                      >\r\n                        {/* <option value=\"Ordered\">Ordered</option>\r\n                        <option value=\"Not-Confirmed\">Not-Confirmed</option>\r\n                        <option value=\"Processing\">Processing</option>\r\n                        <option value=\"Picking-Up\">Picking-Up</option>\r\n                        <option value=\"Out-For-Delivery\">Out-For-Delivery</option>\r\n                        <option value=\"Delivered\">Delivered</option>\r\n                        <option value=\"Cancelled\">Cancelled</option> */}\r\n\r\n                        {employees && employees.map((employee, index) => {\r\n                            return <option key={index} value={employee.Euser._id} >{employee.Euser.name}</option>\r\n                        })}\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                  <button className=\"popup-form-btn\" onClick={() =>  handleEmployeeAssign(user._id, token, order._id, employeeId)}>\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      );\r\n}\r\n\r\nexport default EmployeeUpdate"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\mern\\\\projects\\\\greenbeans\\\\client\\\\src\\\\admin\\\\EmployeeUpdate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { isAuthenticated } from \"../auth\";\nimport Cross from \"../icons/cross-black.svg\";\nimport { addEmployeeOrder, getEmployees } from \"../user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmployeeUpdate = _ref => {\n  _s();\n\n  let {\n    order,\n    setOrderEmployeeAssignActive\n  } = _ref;\n  const [employees, setEmployees] = useState([]);\n  const [employeeId, setEmployeeId] = useState(\"\");\n  const {\n    user,\n    token\n  } = isAuthenticated();\n\n  const preload = async (userId, token) => {\n    try {\n      const data = await getEmployees(userId, token, \"Available\");\n      console.log(data);\n\n      if (data.error) {\n        return console.log(data.error);\n      } else {\n        return setEmployees(data);\n      }\n    } catch (error) {\n      return console.log(error);\n    }\n  };\n\n  const handleEmployeeAssign = async (userId, token, orderId, employeeId) => {\n    try {\n      const data = await addEmployeeOrder(userId, token, orderId, employeeId);\n\n      if (data.error) {\n        return console.log(data.error);\n      } else {\n        return setOrderEmployeeAssignActive(null);\n      }\n    } catch (error) {\n      return console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    preload(user._id, token);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"employeeUpdate-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"black-background\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-small-sec\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-head-sec\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"popup-header employeeUpdate-popup-header\",\n              children: \"Assign Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cross-sec\",\n              onClick: () => setOrderEmployeeAssignActive(null),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: Cross,\n                alt: \"\",\n                className: \"cross-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup-form-single-group\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"popup-form-label\",\n                  children: \"Order ID\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"popup-form-value\",\n                  children: order._id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup-form-single-group\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"popup-form-label\",\n                  children: \"Employee Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  name: \"employeeName\",\n                  id: \"employeeName\",\n                  value: employeeId,\n                  onChange: e => setEmployeeId(e.target.value),\n                  className: \"popup-form-value\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select an Employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 21\n                  }, this), employees && employees.map((employee, index) => {\n                    return /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: employee._id,\n                      children: employee.Euser.name\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 80,\n                      columnNumber: 27\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `popup-form-btn ${employeeId === \"\" ? \"button-unclickable\" : \"\"}`,\n              onClick: () => handleEmployeeAssign(user._id, token, order._id, employeeId),\n              children: \"Assign Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EmployeeUpdate, \"bHgR8Dbm/qHEZOuer7/c0fK6c7s=\");\n\n_c = EmployeeUpdate;\nexport default EmployeeUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeUpdate\");","map":{"version":3,"sources":["F:/mern/projects/greenbeans/client/src/admin/EmployeeUpdate.js"],"names":["React","useState","useEffect","isAuthenticated","Cross","addEmployeeOrder","getEmployees","EmployeeUpdate","order","setOrderEmployeeAssignActive","employees","setEmployees","employeeId","setEmployeeId","user","token","preload","userId","data","console","log","error","handleEmployeeAssign","orderId","_id","e","target","value","map","employee","index","Euser","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { isAuthenticated } from \"../auth\";\r\nimport Cross from \"../icons/cross-black.svg\";\r\nimport { addEmployeeOrder, getEmployees } from \"../user\";\r\n\r\nconst EmployeeUpdate = ({ order, setOrderEmployeeAssignActive }) => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [employeeId, setEmployeeId] = useState(\"\");\r\n\r\n  const { user, token } = isAuthenticated();\r\n\r\n  const preload = async (userId, token) => {\r\n    try {\r\n      const data = await getEmployees(userId, token, \"Available\");\r\n      console.log(data);\r\n      if (data.error) {\r\n        return console.log(data.error);\r\n      } else {\r\n        return setEmployees(data);\r\n      }\r\n    } catch (error) {\r\n      return console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleEmployeeAssign = async (userId, token, orderId, employeeId) => {\r\n    try {\r\n      const data = await addEmployeeOrder(userId, token, orderId, employeeId);\r\n      if (data.error) {\r\n        return console.log(data.error);\r\n      } else {\r\n        return setOrderEmployeeAssignActive(null);\r\n      }\r\n    } catch (error) {\r\n      return console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    preload(user._id, token);\r\n  }, []);\r\n  return (\r\n    <section className=\"employeeUpdate-section\">\r\n      <div className=\"black-background\">\r\n        <div className=\"popup-small-sec\">\r\n          <div className=\"popup-group\">\r\n            <div className=\"popup-head-sec\">\r\n              <h1 className=\"popup-header employeeUpdate-popup-header\">\r\n                Assign Employee\r\n              </h1>\r\n              <div\r\n                className=\"cross-sec\"\r\n                onClick={() => setOrderEmployeeAssignActive(null)}\r\n              >\r\n                <img src={Cross} alt=\"\" className=\"cross-img\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"popup-form\">\r\n              <div className=\"popup-form-single-group\">\r\n                <div className=\"popup-form-group\">\r\n                  <label className=\"popup-form-label\">Order ID</label>\r\n                  <p className=\"popup-form-value\">{order._id}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"popup-form-single-group\">\r\n                <div className=\"popup-form-group\">\r\n                  <label className=\"popup-form-label\">Employee Name</label>\r\n                  <select\r\n                    name=\"employeeName\"\r\n                    id=\"employeeName\"\r\n                    value={employeeId}\r\n                    onChange={(e) => setEmployeeId(e.target.value)}\r\n                    className=\"popup-form-value\"\r\n                  >\r\n                    <option value=\"\">Select an Employee</option>\r\n\r\n                    {employees &&\r\n                      employees.map((employee, index) => {\r\n                        return (\r\n                          <option key={index} value={employee._id}>\r\n                            {employee.Euser.name}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n              <button\r\n                className={`popup-form-btn ${\r\n                  employeeId === \"\" ? \"button-unclickable\" : \"\"\r\n                }`}\r\n                onClick={() =>\r\n                  handleEmployeeAssign(user._id, token, order._id, employeeId)\r\n                }\r\n              >\r\n                Assign Employee\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EmployeeUpdate;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { API } from \"../backend\";\nexport const signup = async _ref => {\n  let {\n    name,\n    email,\n    phoneNumber,\n    password,\n    address\n  } = _ref;\n\n  try {\n    const result = await fetch(`${API}/signup`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        email,\n        phoneNumber,\n        password,\n        address\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return result.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const login = async _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n\n  try {\n    const result = await fetch(`${API}/login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return result.json();\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logout = async next => {\n  try {\n    if (typeof window !== \"undefined\") {\n      localStorage.removeItem(\"jwt\");\n    }\n\n    next();\n    const result = await fetch(`${API}/logout`, {\n      method: \"GET\"\n    });\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\nexport const authenticate = data => {\n  if (typeof window !== \"undefined\") {\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\n  }\n};\nexport const isAuthenticated = () => {\n  if (typeof window == \"undefined\") {\n    return false;\n  }\n\n  if (localStorage.getItem(\"jwt\")) {\n    return JSON.parse(localStorage.getItem(\"jwt\"));\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["F:/mern/projects/greenbeans/client/src/auth/index.js"],"names":["API","signup","name","email","phoneNumber","password","address","result","fetch","method","body","JSON","stringify","headers","json","error","console","log","login","logout","next","window","localStorage","removeItem","authenticate","data","setItem","isAuthenticated","getItem","parse"],"mappings":"AAAA,SAASA,GAAT,QAAoB,YAApB;AAEA,OAAO,MAAMC,MAAM,GAAG,cAAyD;AAAA,MAAlD;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA;AAArC,GAAkD;;AAC7E,MAAG;AACD,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAI,SAAR,EAAkB;AAC1CS,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,QAAAA,IAAD;AAAOC,QAAAA,KAAP;AAAcC,QAAAA,WAAd;AAA2BC,QAAAA,QAA3B;AAAqCC,QAAAA;AAArC,OAAf,CAFoC;AAG1CO,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHiC,KAAlB,CAA1B;AAQA,WAAON,MAAM,CAACO,IAAP,EAAP;AACD,GAVD,CAUC,OAAMC,KAAN,EAAY;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAdM;AAgBP,OAAO,MAAMG,KAAK,GAAG,eAA+B;AAAA,MAAxB;AAAEf,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAwB;;AAClD,MAAI;AACF,UAAME,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAI,QAAR,EAAiB;AACzCS,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAf,CAFmC;AAGzCQ,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHgC,KAAjB,CAA1B;AAQA,WAAON,MAAM,CAACO,IAAP,EAAP;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAdM;AAgBP,OAAO,MAAMI,MAAM,GAAG,MAAOC,IAAP,IAAgB;AACpC,MAAI;AACF,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCC,MAAAA,YAAY,CAACC,UAAb,CAAwB,KAAxB;AACD;;AACDH,IAAAA,IAAI;AAEJ,UAAMb,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAER,GAAI,SAAR,EAAkB;AAC1CS,MAAAA,MAAM,EAAE;AADkC,KAAlB,CAA1B;AAIA,WAAOF,MAAP;AAED,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAhBM;AAkBP,OAAO,MAAMS,YAAY,GAAIC,IAAD,IAAU;AACpC,MAAI,OAAOJ,MAAP,KAAkB,WAAtB,EAAmC;AACjCC,IAAAA,YAAY,CAACI,OAAb,CAAqB,KAArB,EAA4Bf,IAAI,CAACC,SAAL,CAAea,IAAf,CAA5B;AACD;AACF,CAJM;AAMP,OAAO,MAAME,eAAe,GAAG,MAAM;AACnC,MAAI,OAAON,MAAP,IAAiB,WAArB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,MAAIC,YAAY,CAACM,OAAb,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,WAAOjB,IAAI,CAACkB,KAAL,CAAWP,YAAY,CAACM,OAAb,CAAqB,KAArB,CAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAVM","sourcesContent":["import { API } from \"../backend\";\r\n\r\nexport const signup = async ({name, email, phoneNumber, password, address}) => {\r\n  try{\r\n    const result = await fetch(`${API}/signup`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({name, email, phoneNumber, password, address}),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    \r\n    return result.json();\r\n  }catch(error){\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const login = async ({ email, password }) => {\r\n  try {\r\n    const result = await fetch(`${API}/login`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email, password }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    return result.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const logout = async (next) => {\r\n  try {\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.removeItem(\"jwt\");\r\n    }\r\n    next();\r\n\r\n    const result = await fetch(`${API}/logout`, {\r\n      method: \"GET\",\r\n    });\r\n\r\n    return result;\r\n\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const authenticate = (data) => {\r\n  if (typeof window !== \"undefined\") {\r\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = () => {\r\n  if (typeof window == \"undefined\") {\r\n    return false;\r\n  }\r\n\r\n  if (localStorage.getItem(\"jwt\")) {\r\n    return JSON.parse(localStorage.getItem(\"jwt\"));\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}